{"ast":null,"code":"// import { combineReducers } from \"redux\";\nconst initialState = {\n  count: 0,\n  data: []\n}; // console.log(\"inReducer\", initialState);\n\nconst countReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"increment\":\n      return {\n        count: 2,\n        data: action.payload\n      };\n\n    case \"decrement\":\n      return { ...state,\n        count: state.count - 1\n      };\n\n    default:\n      return state;\n  }\n}; // const rootReducer = combineReducers(countReducer);\n\n\nexport default countReducer;","map":{"version":3,"names":["initialState","count","data","countReducer","state","action","type","payload"],"sources":["/home/lalit/Training Data/REACT DATA/foodapplication/src/components/Reducer/Reducer.js"],"sourcesContent":["// import { combineReducers } from \"redux\";\nconst initialState = {\n   count: 0,\n   data: [],\n};\n\n// console.log(\"inReducer\", initialState);\n\nconst countReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case \"increment\":\n         return { count: 2,\n         data:action.payload};\n      case \"decrement\":\n         return { ...state, count: state.count - 1 };\n      default:\n         return state;\n   }\n};\n\n// const rootReducer = combineReducers(countReducer);\n\nexport default countReducer;\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;EAClBC,KAAK,EAAE,CADW;EAElBC,IAAI,EAAE;AAFY,CAArB,C,CAKA;;AAEA,MAAMC,YAAY,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBJ,YAAyB;EAAA,IAAXK,MAAW;;EACpD,QAAQA,MAAM,CAACC,IAAf;IACG,KAAK,WAAL;MACG,OAAO;QAAEL,KAAK,EAAE,CAAT;QACPC,IAAI,EAACG,MAAM,CAACE;MADL,CAAP;;IAEH,KAAK,WAAL;MACG,OAAO,EAAE,GAAGH,KAAL;QAAYH,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc;MAAjC,CAAP;;IACH;MACG,OAAOG,KAAP;EAPN;AASF,CAVD,C,CAYA;;;AAEA,eAAeD,YAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// import { combineReducers } from \"redux\";\nconst initialState = {\n  count: 10\n};\n\nconst countReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"increment\":\n      return { ...state,\n        count: state.count + 1\n      };\n\n    case \"decrement\":\n      return { ...state,\n        count: state.count - 1\n      };\n\n    default:\n      return state;\n  }\n}; // const rootReducer = combineReducers(countReducer);\n\n\nexport default rootReducer;","map":{"version":3,"names":["initialState","count","countReducer","state","action","type","rootReducer"],"sources":["/home/lalit/Training Data/REACT DATA/practice/src/components/redux/Reducer/Reducer.js"],"sourcesContent":["// import { combineReducers } from \"redux\";\n\nconst initialState = {\n   count: 10,\n};\n\nconst countReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case \"increment\":\n         return { ...state, count: state.count + 1 };\n      case \"decrement\":\n         return { ...state, count: state.count - 1 };\n      default:\n         return state;\n   }\n};\n\n// const rootReducer = combineReducers(countReducer);\n\nexport default rootReducer;\n"],"mappings":"AAAA;AAEA,MAAMA,YAAY,GAAG;EAClBC,KAAK,EAAE;AADW,CAArB;;AAIA,MAAMC,YAAY,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBH,YAAyB;EAAA,IAAXI,MAAW;;EACpD,QAAQA,MAAM,CAACC,IAAf;IACG,KAAK,WAAL;MACG,OAAO,EAAE,GAAGF,KAAL;QAAYF,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;MAAjC,CAAP;;IACH,KAAK,WAAL;MACG,OAAO,EAAE,GAAGE,KAAL;QAAYF,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;MAAjC,CAAP;;IACH;MACG,OAAOE,KAAP;EANN;AAQF,CATD,C,CAWA;;;AAEA,eAAeG,WAAf"},"metadata":{},"sourceType":"module"}
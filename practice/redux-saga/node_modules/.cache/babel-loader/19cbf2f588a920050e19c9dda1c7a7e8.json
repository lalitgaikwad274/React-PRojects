{"ast":null,"code":"// import { combineReducers } from \"redux\";\n\nconst initialState = {\n  count: 10\n};\nconst countReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"count-up\":\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    case \"decrement\":\n      return {\n        ...state,\n        count: state.count - 1\n      };\n    default:\n      return state;\n  }\n};\n\n// const rootReducer = combineReducers(countReducer);\n\nexport default countReducer;","map":{"version":3,"names":["initialState","count","countReducer","state","action","type"],"sources":["/home/lalit/Training Data/REACT DATA/practice/redux-saga/src/components/redux/Reducer/Reducer.js"],"sourcesContent":["// import { combineReducers } from \"redux\";\n\nconst initialState = {\n   count: 10,\n};\n\nconst countReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case \"count-up\":\n         return { ...state, count: state.count + 1 };\n      case \"decrement\":\n         return { ...state, count: state.count - 1 };\n      default:\n         return state;\n   }\n};\n\n// const rootReducer = combineReducers(countReducer);\n\nexport default countReducer;\n"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAG;EAClBC,KAAK,EAAE;AACV,CAAC;AAED,MAAMC,YAAY,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGH,YAAY;EAAA,IAAEI,MAAM;EAC/C,QAAQA,MAAM,CAACC,IAAI;IAChB,KAAK,UAAU;MACZ,OAAO;QAAE,GAAGF,KAAK;QAAEF,KAAK,EAAEE,KAAK,CAACF,KAAK,GAAG;MAAE,CAAC;IAC9C,KAAK,WAAW;MACb,OAAO;QAAE,GAAGE,KAAK;QAAEF,KAAK,EAAEE,KAAK,CAACF,KAAK,GAAG;MAAE,CAAC;IAC9C;MACG,OAAOE,KAAK;EAAC;AAEtB,CAAC;;AAED;;AAEA,eAAeD,YAAY"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/lalit/Training Data/REACT DATA/practice/classComponent/src/components/Header.js\";\nimport { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.changeColor = () => {\n      this.setState(favoritecolor === blue ? {\n        favoritecolor: \"red\"\n      } : {\n        favoritecolor: \"blue\"\n      });\n    };\n    this.state = {\n      favoritecolor: \"red\"\n    };\n  }\n\n  // getDerivedStateFromProps is the first method that is called when a component gets updated\n\n  // static getDerivedStateFromProps(props, state) {\n  //    return { favoritecolor: props.favcol };\n  // }\n\n  //if shouldComponentUpdate() return false it will not update the component and if it is true then it will upadte th component\n  // In the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not.\n\n  // shouldComponentUpdate() {\n  //    return true;\n  // }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"My Favorite Color is \", this.state.favoritecolor]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.changeColor,\n        children: \"Change color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }, this);\n  }\n}\nexport default Header;","map":{"version":3,"names":["Component","Header","constructor","props","changeColor","setState","favoritecolor","blue","state","render"],"sources":["/home/lalit/Training Data/REACT DATA/practice/classComponent/src/components/Header.js"],"sourcesContent":["import { Component } from \"react\";\nclass Header extends Component {\n   constructor(props) {\n      super(props);\n      this.state = { favoritecolor: \"red\" };\n   }\n\n   // getDerivedStateFromProps is the first method that is called when a component gets updated\n\n   // static getDerivedStateFromProps(props, state) {\n   //    return { favoritecolor: props.favcol };\n   // }\n\n   //if shouldComponentUpdate() return false it will not update the component and if it is true then it will upadte th component\n   // In the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not.\n\n   // shouldComponentUpdate() {\n   //    return true;\n   // }\n\n   changeColor = () => {\n      this.setState(\n         favoritecolor === blue\n            ? { favoritecolor: \"red\" }\n            : { favoritecolor: \"blue\" }\n      );\n   };\n   render() {\n      return (\n         <div>\n            <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n            <button type=\"button\" onClick={this.changeColor}>\n               Change color\n            </button>\n         </div>\n      );\n   }\n}\nexport default Header;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AAAC;AAClC,MAAMC,MAAM,SAASD,SAAS,CAAC;EAC5BE,WAAW,CAACC,KAAK,EAAE;IAChB,KAAK,CAACA,KAAK,CAAC;IAAC,KAiBhBC,WAAW,GAAG,MAAM;MACjB,IAAI,CAACC,QAAQ,CACVC,aAAa,KAAKC,IAAI,GACjB;QAAED,aAAa,EAAE;MAAM,CAAC,GACxB;QAAEA,aAAa,EAAE;MAAO,CAAC,CAChC;IACJ,CAAC;IAtBE,IAAI,CAACE,KAAK,GAAG;MAAEF,aAAa,EAAE;IAAM,CAAC;EACxC;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EASAG,MAAM,GAAG;IACN,oBACG;MAAA,wBACG;QAAA,oCAA0B,IAAI,CAACD,KAAK,CAACF,aAAa;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM,eACxD;QAAQ,IAAI,EAAC,QAAQ;QAAC,OAAO,EAAE,IAAI,CAACF,WAAY;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAEvC;IAAA;MAAA;MAAA;MAAA;IAAA,QACN;EAEZ;AACH;AACA,eAAeH,MAAM"},"metadata":{},"sourceType":"module"}